/*
Abstract Containers:
Each type of courses (cmsc, math, sci) has the containers
Courses Available - Courses available to take (that have not been taken)
Courses Taken - Courses that have been taken
Courses Options - Courses that can be taken, based on courses taken

Functions:
init()
findCourse(id)
findCourseIndex(id, course_list)
insertCourse(course, course_list)
updateAllCourses()
updateCourses(type)
updateAllOptions()
updateOptions(type)
updateAllSelections()
updateSelections(type)
classTaken(id, type, depth)
classUntaken(id, type, depth)
getCoursesDebug()
*/

//run init() on completion of window load
window.onload = init;

var help;

//all course objects
var courses;

//course object containers
var courses_available = [];
courses_available["cmsc"] = [];
courses_available["math"] = [];
courses_available["sci"] = [];
var courses_taken = [];
courses_taken["cmsc"] = [];
courses_taken["math"] = [];
courses_taken["sci"] = [];
var courses_options = [];
courses_options["cmsc"] = [];
courses_options["math"] = [];
courses_options["sci"] = [];

/*
init()
Parses the JSON file with all of the course objects; Defines a set order for
the course objects based on the order of the JSON file to be used for inserstion
into course object containers; Then calls sequentially the following:

updateAllCourses()    - update the available courses object containers
updateAllOptions()    - update the options courses object containers for all
						course types
updateAllSelections() - update the html for all course types
*/
function init() {
	//parse the json that was passed by php (courses_json)
	courses = JSON.parse(courses_json);
	courses = courses["courses"];

	//define the set order to be used for insertion in course object containers
	for (var i = 0; i < courses.length; i++) {
		courses[i].order = i;
	}

	/*
	DEBUG
	writes a string representation of all the courses generated by
	getCoursesDebug() to the innerHTML of the element with id "main"	
	var main = document.getElementById("main");
	var course_list = getCoursesDebug();
	for (var i = 0; i < course_list.length; i++) {
		main.innerHTML += "<p>" + course_list[i] + "</p>\n";
	}
	END DEBUG */

	//update the available courses object containers
	updateAllCourses();

	//update the options courses object containers for all course types
	updateAllOptions();

	//update the html for all course types
	updateAllSelections();

	//initialize the other scripts
	initTooltipContent();
	initTabContent();
}

/*
findCourse(id)
id - course id corresponding to a course object in the courses array
Finds the course object in the courses array with the matching course id and
returns it; Returns null if it does not exist
*/
function findCourse(id) {
	//iterate over the courses array
	for (var i = 0; i < courses.length; i++) {
		//found the course, return it
		if (courses[i].id == id) {
			return courses[i];
		}
	}

	//course object does not exist
	return null;
}

/*
findCourseIndex(id, course_list)
id 			- course id corresponding to a course object in the provided
			  course_list array
course_list - an array of course objects
Finds the index of the course object in the provided course_list array with the
matching course id and returns it; Returns -1 if it does not exist
*/
function findCourseIndex(id, course_list) {
	//iterate over the provided course_list array
	for (var i = 0; i < course_list.length; i++) {
		//found the course, return the index
		if (course_list[i].id == id) {
			return i;
		}
	}

	//course object does not exist
	return -1;
}

/*
insertCourse(course, course_list)
course 		- a course object
course_list - an array of course objects
Inserts course into course_list based on the order attribute of the course
objects
*/
function insertCourse(course, course_list) {
	//iterate over the provided course_list array
	for (var i = 0; i < course_list.length; i++) {
		//found the correct place, insert it and return
		if (course.order < course_list[i].order) {
			course_list.splice(i, 0, course);
			return;
		}
	}

	//push to the end of the course_list array if it was not inserted
	course_list.push(course);
}

/*
updateAllCourses()
Calls updatesCourses() on every course type (cmsc, math, sci)
*/
function updateAllCourses() {
	updateCourses("cmsc");
	updateCourses("math");
	updateCourses("sci");
}

/*
updateCourses(type)
type - type of courses (cmsc, math, sci)
Pushes all of the course objects from the courses array that has type matching
the provided type to the available courses array of the provided type
*/
function updateCourses(type) {
	//reset the available courses array for the provided type
	courses_available[type] = [];
	//iterate over the courses array
	for (var i = 0; i < courses.length; i++) {
		//skip the dummy course (prereq for cmsc447)
		if (courses[i].id == "000004") {
			continue;
		}

		//push the course object to the available courses for the provided type
		if (courses[i].type == type) {
			courses_available[type].push(courses[i]);
		}
	}
}

/*
updateAllOptions()
Calls updatesOptions() on every course type (cmsc, math, sci)
*/
function updateAllOptions() {
	updateOptions("cmsc");
	updateOptions("math");
	updateOptions("sci");
}

/*
updateOptions(type)
type - type of courses (cmsc, math, sci)
Pushes the course objects from the available courses array of the provided type
that can be taken, based on the courses that exist in the taken course arrays of
all course type, to the course options array of the provided type
*/
function updateOptions(type) {
	courses_options[type] = [];
	//iterate over the available courses array for the provided type
	for (var i = 0; i < courses_available[type].length; i++) {
		var option = true;

		//special case to see if cmsc447 is an option
		if (type == "cmsc" && courses_available["cmsc"][i].id == "101927") {
			var senior_requirement = false;
			//iterate over the cmsc courses taken array
			for (var j = 0; j < courses_taken["cmsc"].length; j++) {
				//if a senior course is found, set and break
				if (courses_taken["cmsc"][j].senior == "1") {
					senior_requirement = true;
					break;
				}
			}

			//cmsc447 is an option, push it to the cmsc course options array
			if (senior_requirement) {
				courses_options["cmsc"].push(courses_available["cmsc"][i]);
				continue;
			}
		}

		//iterate over the prerequisite courses for this course object
		var prereqs = courses_available[type][i].prereqs;
		for (var j = 0; j < prereqs.length; j++) {
			/*
			determine if this course is an option based on the course objects
			that exist in the taken courses arrays of all course types
			*/
			if (findCourseIndex(prereqs[j].id, courses_taken["cmsc"]) == -1 &&
				findCourseIndex(prereqs[j].id, courses_taken["math"]) == -1 &&
				findCourseIndex(prereqs[j].id, courses_taken["sci"]) == -1) {
				option = false;
				break;
			}
		}

		/*
		push this course object to the course options array of the provided type
		based on the criteria evaluated above
		*/
		if (option) {
			courses_options[type].push(courses_available[type][i]);
		}
	}
}

/*
updateAllSelections()
Calls updatesSelections() on every course type (cmsc, math, sci)
*/
function updateAllSelections() {
	updateSelections("cmsc");
	updateSelections("math");
	updateSelections("sci");
}

/*
updateSelections(type)
type - type of courses (cmsc, math, sci)
Updates the contents of the select elements associated with the provided type
based on the course container arrays of the provided type (available, taken,
options)
*/
function updateSelections(type) {
	//get the elements associated with the provided type
	var available_select = document.getElementById(type + "-available");
	var taken_select = document.getElementById(type + "-taken");
	var options_select = document.getElementById(type + "-options");

	//initialize the contents to be written to their innerHTMLs
	var available_select_content = "";
	var taken_select_content = "";
	var options_select_content = "";

	//iterate over the available courses of the provided type
	for (var i = 0; i < courses_available[type].length; i++) {
		/*
		generate an element for each course object; attributes:
		class 		- every element is a course-item
		value 		- value of the element is the course object id
		onmouseover - call updateTooltip(id) with the course object id
		onclick 	- call classTaken(id, type) with the course object id and
					  type
		*/

		available_select_content += "<div class=\"course-item";
		if (courses_available[type][i].required == "1") {
			available_select_content += " course-required";
		}
		available_select_content += "\" value=\"" + courses_available[type][i].id;
		available_select_content += "\" onmouseover=\"updateTooltip('";
		available_select_content += courses_available[type][i].id;
		available_select_content += "')\" onclick=\"classTaken('";
		available_select_content += courses_available[type][i].id;
		available_select_content += "', '";
		available_select_content += type;
		available_select_content += "')\"><p>";
		available_select_content += courses_available[type][i].name;
		available_select_content += "</p></div>";
	}

	//iterate over the taken courses of the provided type
	for (var i = 0; i < courses_taken[type].length; i++) {
		/*
		generate an element for each course object; attributes:
		class 		- every element is a course-item
		value 		- value of the element is the course object id
		onmouseover - call updateTooltip(id) with the course object id
		onclick 	- call classUntaken(id, type) with the course object id and
					  type
		*/
		taken_select_content += "<div class=\"course-item";
		if (courses_taken[type][i].required == "1") {
			taken_select_content += " course-required";
		}
		taken_select_content += "\" value=\"" + courses_taken[type][i].id;
		taken_select_content += "\" onmouseover=\"updateTooltip('";
		taken_select_content += courses_taken[type][i].id;
		taken_select_content += "')\" onclick=\"classUntaken('";
		taken_select_content += courses_taken[type][i].id;
		taken_select_content += "', '";
		taken_select_content += type;
		taken_select_content += "')\"><p>";
		taken_select_content += courses_taken[type][i].name;
		taken_select_content += "</p></div>";
	}

	//iterate over the course options of the provided type
	for (var i = 0; i < courses_options[type].length; i++) {
		/*
		generate an element for each course object; attributes:
		class 		- every element is a course-item
		value 		- value of the element is the course object id
		onmouseover - call updateTooltip(id) with the course object id
		*/
		options_select_content += "<div class=\"course-item";
		if (courses_options[type][i].required == "1") {
			options_select_content += " course-required";
		}
		options_select_content += "\" value=\"" + courses_options[type][i].id;
		options_select_content += "\" onmouseover=\"updateTooltip('"
		options_select_content += courses_options[type][i].id;
		options_select_content += "')\"><p>";
		options_select_content += courses_options[type][i].name;
		options_select_content += "</p></div>";
	}

	//write the contents to the innerHTMLs of the select elements
	available_select.innerHTML = available_select_content;
	taken_select.innerHTML = taken_select_content;
	options_select.innerHTML = options_select_content;

	//call from tab-content.js to fix positioning of tab selection areas
	adjustScrollContent(type);
}

/*
classTaken(id, type, depth)
id 	  - course id corresponding to a course object in the courses array
type  - type of course (cmsc, math, sci)
depth - reccursion depth (defaults to 0)
Removes the course object from the available courses array of the provided type
matching the course id and inserts it into the taken courses of the provided
type; Recursively calls the function on all prerequisite courses of the course
object; The initial call makes calls to:
updateAllOptions()    - update the options based on taken courses
updateAllSelections() - update the select elements
*/
function classTaken(id, type, depth = 0) {
	//get the course object based on id
	var course = findCourse(id);
	/*
	get the index of the course object in the available courses array of the
	provided type
	*/
	var idx = findCourseIndex(id, courses_available[type]);

	/*
	return if the course object is not in the available courses array of the
	provided type
	*/
	if (idx == -1) {
		return;
	}

	/*
	special case for CMSC 447 and CMSC 448 (requires one 400-Level CMSC course
	taken)
	*/
	if (type == "cmsc" && (id == "101927" || id == "052944")) {
		//check cmsc courses taken array for a senior level course object
		var senior_requirement = false;
		for (var i = 0; i < courses_taken["cmsc"].length; i++) {
			if (courses_taken["cmsc"][i].senior == "1") {
				senior_requirement = true;
				break;
			}
		}

		//display error and return if requirement not met
		if (!senior_requirement) {
			var message = "One 400-Level Computer Science course must be taken";
			message += " to take CMSC 447 - Software Engineering I";
			toggleGlobalWarning(true, message);
			return;
		}
	}

	/*
	remove the course object from the available courses array of the provided
	type
	*/
	courses_available[type].splice(idx, 1);
	//insert the course object into the taken courses array of the provided type
	insertCourse(course, courses_taken[type]);

	//iterate over the prerequisite courses of the course object
	var prereqs = course.prereqs;
	for (var i = 0; i < prereqs.length; i++) {
		//get the course based on the prerequisite id
		var prereq = findCourse(prereqs[i].id);
		//recursive call to process the course as taken
		classTaken(prereq.id, prereq.type, depth - 1)
	}

	//performed by the intial call to update the options and select elements
	if (depth == 0) {
		updateAllOptions();
		updateAllSelections();		
	}
}

/*
classUntaken(id, type, depth)
id 	  - course id corresponding to a course object in the courses array
type  - type of course (cmsc, math, sci)
depth - reccursion depth (defaults to 0)
Removes the course object from the taken courses array of the provided type
matching the course id and inserts it into the available courses of the provided
type; Recursively calls the function on courses taken that have a prerequisite
course matching the affected course; The initial call makes calls to:
updateAllOptions()    - update the options based on taken courses
updateAllSelections() - update the select elements
*/
function classUntaken(id, type, depth = 0) {
	//get the course object based on id
	var course = findCourse(id);
	/*
	get the index of the course object in the taken courses array of the
	provided type
	*/
	var idx = findCourseIndex(id, courses_taken[type]);

	/*
	return if the course object is not in the taken courses array of the
	provided type
	*/
	if (idx == -1) {
		return;
	}

	/*
	special case for untaking 400-Level CMSC courses (ensure there is one or
	more remaining if CMSC447 is in the courses taken array)
	*/
	if (type == "cmsc" && course.id != "101927" && course.senior == "1") {
		var cmsc447 = false;
		var cmsc448 = false;
		var senior_count = 0;

		//iterate over cmsc courses taken array
		for (var i = 0; i < courses_taken["cmsc"].length; i++) {
			/*
			check if cmsc447 or cmsc448 is taken and count the number of other
			400-Level CMSC courses
			*/
			if (courses_taken["cmsc"][i].id == "101927") {
				cmsc447 = true;
			} else if (courses_taken["cmsc"][i].id == "052944") {
				cmsc448 = true;
			} else if (courses_taken["cmsc"][i].senior == "1") {
				senior_count++;
			}
		}

		/*
		untake cmsc447 if there is only one 400-Level CMSC course and it is
		being untaken
		*/
		if (cmsc447 && senior_count == 1) {
			classUntaken("101927", "cmsc", depth - 1);
		}
	}

	//remove the course object from the taken courses array of the provided type
	courses_taken[type].splice(idx, 1);
	/*
	insert the course object into the available courses array of the provided
	type
	*/
	insertCourse(course, courses_available[type]);

	/*
	iterate over the taken courses array of each course type and make a
	recursive call on that course if one of its prerequisite courses was the one
	affected
	*/
	for (var i = 0; i < courses_taken["cmsc"].length; i++) {
		var prereqs = courses_taken["cmsc"][i].prereqs;
		for (var j = 0; j < prereqs.length; j++) {
			if (prereqs[j].id == id) {
				classUntaken(courses_taken["cmsc"][i].id,
								courses_taken["cmsc"][i].type, depth - 1);
			}
		}
	}
	for (var i = 0; i < courses_taken["math"].length; i++) {
		var prereqs = courses_taken["math"][i].prereqs;
		for (var j = 0; j < prereqs.length; j++) {
			if (prereqs[j].id == id) {
				classUntaken(courses_taken["math"][i].id,
								courses_taken["math"][i].type, depth - 1);
			}
		}
	}
	for (var i = 0; i < courses_taken["sci"].length; i++) {
		var prereqs = courses_taken["sci"][i].prereqs;
		for (var j = 0; j < prereqs.length; j++) {
			if (prereqs[j].id == id) {
				classUntaken(courses_taken["sci"][i].id,
								courses_taken["sci"][i].type, depth - 1);
			}
		}
	}

	//performed by the intial call to update the options and select elements
	if (depth == 0) {
		updateAllOptions();
		updateAllSelections();		
	}
}

/*
getCourseDebug()
Returns a string representation of the course objects from the courses array
*/
function getCoursesDebug() {
	var course_list = [];
	//iterate over the courses array
	for (var i = 0; i < courses.length; i++) {
		//skip the dummy course
		if (courses[i].id == "000004") {
			continue;
		}
		//add its attributes to the string representation
		var course = "<b>Course ID:</b> " + courses[i].id + "<br />";
		course += "<b>Type:</b> " + courses[i].type + "<br />";
		course += "<b>Credits:</b> " + courses[i].credits + "<br />";
		course += "<b>Required:</b> " + courses[i].required + "<br />";
		course += "<b>Senior:</b> " + courses[i].senior + "<br />";
		course += "<b>Course Name:</b> " + courses[i].name + "<br />";
		course += "<b>Course Description:</b><br />" + courses[i].desc + "<br />";

		//add its prerequisites
		course += "<b>Prerequisites:</b><br />";
		var prereqs = courses[i].prereqs;
		//no prerequisites
		if (prereqs.length == 0) {
			course += "&nbsp;&nbsp;&nbsp;&nbsp;None<br />";
		//has prerequisites
		} else {
			//get the course name of the prerequisite using its course id
			for (var j = 0; j < prereqs.length; j++) {
				var prereq = findCourse(prereqs[j].id);
				course += "&nbsp;&nbsp;&nbsp;&nbsp;" + prereq.name + "<br />";
			}			
		}
		//push it to the array
		course_list.push(course);
	}

	return course_list;
}